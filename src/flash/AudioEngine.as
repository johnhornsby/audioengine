package  {	import fl.controls.Label;	import flash.media.SoundLoaderContext;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.events.Event;	import flash.net.URLRequest;	import flash.media.SoundTransform;		public class AudioEngine {				private var _preloadObjects:Object = {};		private var _instancesArray:Array = [];		private var _instanceIncrement:int = 0;		private var _volume:Number = 1;		private var _audioEngineFlashPlayer:AudioEngineFlashPlayer;		public function AudioEngine(audioEngineFlashPlayer) {			// constructor code			_audioEngineFlashPlayer = audioEngineFlashPlayer;			init();		}		//PRIVATE		//______________________________________________________________________		private function init():void {					}				private function onPreloadSoundComplete(e:Event):void {			var sound:Sound = e.target as Sound;			var preloadSoundObject:Object;			for(var key:String in _preloadObjects){				preloadSoundObject = _preloadObjects[key];				if(preloadSoundObject.sound == sound){					preloadSoundObject.isPreloaded = true;					trace("AudioEngine onPreloadSoundComplete: "+preloadSoundObject.label);					return;				}			}		}				private function onSoundCompleteHandler(e:Event):void {			var audioInstanceItem:AudioInstanceItem;						for(var i = _instancesArray.length-1; i>-1 ;i--){				audioInstanceItem = _instancesArray[i];				if(audioInstanceItem.soundChannel == SoundChannel(e.target)){										trace("AudioEngine onSoundCompleteHandler: "+audioInstanceItem.label);										audioInstanceItem.soundChannel.removeEventListener(Event.SOUND_COMPLETE,onSoundCompleteHandler);					if(audioInstanceItem.shouldAutoDestroy == true){						audioInstanceItem.soundChannel = null;						audioInstanceItem = null;						_instancesArray.splice(i,1);					}else{						audioInstanceItem.isPlaying = false;						if(audioInstanceItem.shouldAutoRewind == true){							audioInstanceItem.position = 0;							if(audioInstanceItem.shouldAutoStop == false){								//audioInstanceItem.soundChannel = null;								//play again								play(audioInstanceItem.label,audioInstanceItem.id);							}						}					}					return;				}			}		}				private function createAudioInstance(preloadedObject:Object,autoDestroy:Boolean = true,autoRewind:Boolean = false,autoStop:Boolean = true):int {			var audioInstanceItem:AudioInstanceItem = new AudioInstanceItem();			audioInstanceItem.src = preloadedObject.src;			audioInstanceItem.label = preloadedObject.label;			audioInstanceItem.id = _instanceIncrement;			audioInstanceItem.sound = preloadedObject.sound;			audioInstanceItem.isPlaying = false;			audioInstanceItem.shouldAutoDestroy = autoDestroy;			audioInstanceItem.shouldAutoRewind = autoRewind;			audioInstanceItem.shouldAutoStop = autoStop;			_instancesArray.push(audioInstanceItem);			this._instanceIncrement++;			return audioInstanceItem.id;		}				private function getAudioInstances(label:String, id:int = -1):Array {			var audioInstanceItem:AudioInstanceItem;			var results = [];			for(var increment:int = _instancesArray.length-1; increment > -1; increment--){				audioInstanceItem = _instancesArray[increment];				if(id != -1){					if(audioInstanceItem.id == id){						results.push(audioInstanceItem);						break;					}				}else{					if(audioInstanceItem.label == label){						results.push(audioInstanceItem);					}				}			}			return results;		}		private function removeAudioInstance(audioInstanceItem:AudioInstanceItem):void{			var index = _instancesArray.indexOf(audioInstanceItem);			if(index != -1){				_instancesArray.splice(index,1);			}		}				private function validateLabelOrID(label:String, id:int=-1):Boolean {			var increment:int			if(id != -1){				var idMatch:Boolean = false;				for(increment = _instancesArray.length-1; increment > -1; increment--){					if(_instancesArray[increment].id == id){						idMatch = true;					}				}				if(!idMatch){										_audioEngineFlashPlayer.sendMessageToJavaScript("AudioEngine No such instance ID, Create an audio instance first");				}				return idMatch;			}else{				var labelMatch:Boolean = false;				for(increment = _instancesArray.length-1; increment > -1; increment--){					if(_instancesArray[increment].label == label){						labelMatch = true;					}				}				if(!labelMatch){					_audioEngineFlashPlayer.sendMessageToJavaScript("AudioEngine No such instance label, Create an audio instance first");									}				return labelMatch;			}			return false;		}		//PUBLIC		//______________________________________________________________________		public function preload(preloadObjects:Array):void {			var l:int = preloadObjects.length			var label:String;			for(var i:int=0; i<l; i++){				label = preloadObjects[i].label;				if(_preloadObjects[label] == undefined){					_preloadObjects[label] = {};					_preloadObjects[label].label = label;					_preloadObjects[label].src = preloadObjects[i].mp3;					_preloadObjects[label].sound = new Sound();					_preloadObjects[label].sound.addEventListener(Event.COMPLETE,onPreloadSoundComplete);					_preloadObjects[label].sound.load(new URLRequest(_preloadObjects[label].src), new SoundLoaderContext(1000, false));					_preloadObjects[label].isPreloaded = false;				}			}		}				public function create(label:String, autoDestroy:Boolean, autoRewind:Boolean, autoStop:Boolean):int {			var playInstanceID:int = -1;			var preloadedObject = _preloadObjects[label];					if(preloadedObject != undefined){				if(preloadedObject.isPreloaded == true){					playInstanceID = createAudioInstance(preloadedObject,autoDestroy,autoRewind,autoStop);				}else{					_audioEngineFlashPlayer.sendMessageToJavaScript("AudioEngine create() Warning "+label+" has not finished preloading");				}			}else{				_audioEngineFlashPlayer.sendMessageToJavaScript("AudioEngine create() Error "+label+" has not started preloading");			}			return playInstanceID;		}				public function play(label:String, id:int=-1):Boolean {						var validate:Boolean = validateLabelOrID(label,id);			if(!validate) return validate;									var success:Boolean = false;			var audioInstances:Array = getAudioInstances(label,id);			var audioInstanceItem:AudioInstanceItem;			for(var i:int=0;i<audioInstances.length;i++){				audioInstanceItem = audioInstances[i];				//if(audioInstanceItem.isPlaying === false){				if(audioInstanceItem.soundChannel != null){	//not sure but I think when we play here if sound channel is alreay created then we should remove listeners as it is replaced					audioInstanceItem.soundChannel.removeEventListener(Event.SOUND_COMPLETE,onSoundCompleteHandler);				}				/*				var memoryHash:String;				try				{					FakeClass(audioInstanceItem.soundChannel);				}				catch (e:Error)				{					memoryHash = String(e).replace(/.*([@|\$].*?) to .*$/gi, '$1');					trace("soundChannel before play "+memoryHash);				}				*/				audioInstanceItem.soundChannel = audioInstanceItem.sound.play(audioInstanceItem.position);				audioInstanceItem.soundChannel.addEventListener(Event.SOUND_COMPLETE,onSoundCompleteHandler,false,0,true);				audioInstanceItem.soundChannel.soundTransform = new SoundTransform(audioInstanceItem.volume * _volume);				audioInstanceItem.isPlaying = true;				success = true;				//}			}						return success;		}						public function pause(label:String, id:int = -1):void {			var audioInstances:Array = getAudioInstances(label,id);			var audioInstanceItem:AudioInstanceItem;			for(var i:int=0;i<audioInstances.length;i++){				audioInstanceItem = audioInstances[i];				if(audioInstanceItem.isPlaying === true){					if(audioInstanceItem.soundChannel != null){	//not sure but I think when we play here if sound channel is alreay created then we should remove listeners as it is replaced						audioInstanceItem.soundChannel.removeEventListener(Event.SOUND_COMPLETE,onSoundCompleteHandler);					}					audioInstanceItem.position = audioInstanceItem.soundChannel.position;					audioInstanceItem.soundChannel.stop();					audioInstanceItem.isPlaying = false;					audioInstanceItem.soundChannel = null;				}			}		}				public function stop(label:String, id:int = -1):void {			pause(label,id);			var audioInstances:Array = getAudioInstances(label,id);			for(var i:int=0;i<audioInstances.length;i++){				removeAudioInstance(audioInstances[i]);			}		}				public function stopAll():void {			var audioInstanceItem:AudioInstanceItem; 			for(var i:int = _instancesArray.length-1; i > -1; i--){				audioInstanceItem = _instancesArray[i];				stop(audioInstanceItem.label,audioInstanceItem.id);			}		}				public function setVolume(volume:Number):void {			var decrement:int = _instancesArray.length;			var audioInstanceItem:AudioInstanceItem;			_volume = volume;			while(decrement--){				audioInstanceItem = _instancesArray[decrement];				if(audioInstanceItem.isPlaying == true){					audioInstanceItem.soundChannel.soundTransform = new SoundTransform(audioInstanceItem.volume * _volume);				}			}		}	}	}internal final class FakeClass { }